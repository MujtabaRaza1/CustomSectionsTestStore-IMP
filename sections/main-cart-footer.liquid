{{ 'component-cart.css' | asset_url | stylesheet_tag }}
{{ 'component-totals.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}
{{ 'component-discounts.css' | asset_url | stylesheet_tag }}


<div class="page-width{% if cart == empty %} is-empty{% endif %}" id="main-cart-footer" data-id="{{ section.id }}">
  <div class="drawer__discount-code section">
      <label for="CartDrawer-DiscountCode" class="label1">Discount Code</label>
      <div class="input-group">
        {% assign discountCode = settings.discount_code %}
            <input
              type="text"
              id="CartDrawer-DiscountCode"
              name="discount_code"
              class="input-group__field"
              placeholder="Enter discount code"
              value="{{ discountCode }}"
            >            
            <button type="submit" class="button input-group__btn" id="apply-discount-button">Apply</button>
            <br>
            <span class="cartCondition hidden">
            </span> 

            
      </div>
    </div>
  <div>
    <div class="cart__footer">
      {%- if settings.show_cart_note -%}
        <cart-note class="cart__note field">
          <label for="Cart-note">{{ 'sections.cart.note' | t }}</label>
          <textarea
            class="text-area field__input"
            name="note"
            form="cart"
            id="Cart-note"
            placeholder="{{ 'sections.cart.note' | t }}"
          >{{ cart.note }}</textarea>
        </cart-note>
      {%- endif -%}
      
      <div class="cart__blocks">
        {% for block in section.blocks %}
          {%- case block.type -%}
            {%- when '@app' -%}
              {% render block %}
            {%- when 'subtotal' -%}
              <div class="js-contents" {{ block.shopify_attributes }}>
                <div class="totals">
                  <h2 class="totals__subtotal">{{ 'sections.cart.subtotal' | t }}</h2>
                  <p class="totals__subtotal-value">{{ cart.total_price | money_with_currency }}</p>
                </div>

                <div>
                  {%- if cart.cart_level_discount_applications.size > 0 -%}
                    <ul class="discounts list-unstyled" role="list" aria-label="{{ 'customer.order.discount' | t }}">
                      {%- for discount in cart.cart_level_discount_applications -%}
                        <li class="discounts__discount discounts__discount--position">
                          {%- render 'icon-discount' -%}
                          {{ discount.title }}
                          (-{{ discount.total_allocated_amount | money }})
                        </li>
                      {%- endfor -%}
                    </ul>
                  {%- endif -%}
                </div>

                <small class="tax-note caption-large rte">
                  {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
                    {{ 'sections.cart.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
                  {%- elsif cart.taxes_included -%}
                    {{ 'sections.cart.taxes_included_but_shipping_at_checkout' | t }}
                  {%- elsif shop.shipping_policy.body != blank -%}
                    {{ 'sections.cart.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
                  {%- else -%}
                    {{ 'sections.cart.taxes_and_shipping_at_checkout' | t }}
                  {%- endif -%}
                </small>
              </div>
            {%- else -%}
              <div class="cart__ctas" {{ block.shopify_attributes }}>
                <noscript>
                  <button type="submit" class="cart__update-button button button--secondary" form="cart">
                    {{ 'sections.cart.update' | t }}
                  </button>
                </noscript>

                <button
                  type="submit"
                  id="checkout"
                  class="cart__checkout-button button"
                  name="checkout"
                  {% if cart == empty %}
                    disabled
                  {% endif %}
                  form="cart"
                >
                  {{ 'sections.cart.checkout' | t }}
                </button>
              </div>

              {%- if additional_checkout_buttons -%}
                <div class="cart__dynamic-checkout-buttons additional-checkout-buttons">
                  {{ content_for_additional_checkout_buttons }}
                </div>
              {%- endif -%}
          {%- endcase -%}
        {% endfor %}

        <div id="cart-errors"></div>
      </div>
    </div>
  </div>
</div>
<script>

      var discountCodeInput = document.querySelector('#CartDrawer-DiscountCode');

    if (localStorage.getItem('discountCode')) {
      var savedDiscountCode = localStorage.getItem('discountCode');
      discountCodeInput.value = savedDiscountCode;
    }

    discountCodeInput.addEventListener('change', function() {
      var enteredDiscountCode = discountCodeInput.value;
      localStorage.setItem('discountCode', enteredDiscountCode);
    });

</script>


<script>
  const addToCart = async (variantId) => {
    const formData = new FormData();
    formData.append('id', variantId);
    formData.append('quantity', '1');

    try {
      const cartResponse = await fetch('/cart.js');
      const cartData = await cartResponse.json();

      let isVariantInCart = false;
        for (const item of cartData.items) {
          const VariantCheck = promos.find(obj => obj.product == item.variant_id);
          if(item.price == 0 && VariantCheck){
            const formData = new FormData();
            const variantIdRemove = item.variant_id;
            formData.append('id', variantIdRemove);
            formData.append('quantity', '0');
            isVariantInCart = true;

            if (isVariantInCart) {
              await fetch('/cart/change.js', {
                method: 'POST',
                body: formData
              });
            }
          }
        }

      

      // If the variant is not in the cart, add the product
      const addToCartResponse = await fetch('/cart/add.js', {
        method: 'POST',
        body: formData
      });
      const data = await addToCartResponse.json();
      {% comment %} console.log('Product added to cart:', data); {% endcomment %}
      window.location.reload();
    } catch (error) {
      // Handle any errors that occurred during the request
      console.log('Error adding product to cart:', error);
    }
  }
        function removeTwoZeros(number) {
          // Convert the number to a string
          let numberString = number.toString();
        
          // Check if the number has at least two zeros at the end
          if (numberString.length >= 2) {
            // Remove the last two characters (zeros)
            numberString = numberString.slice(0, -2);
          } else {
            // If there are less than two characters, set the number to zero
            numberString = '0';
          }
        
          // Convert the updated string back to a number and return it
          return Number(numberString);
        }
        const checkThreshold = async() => {
          const cartResponse = await fetch('/cart.js');
          const cartData = await cartResponse.json();
          const span = document.querySelector('.cartCondition');
          let inputCode = document.querySelector('#CartDrawer-DiscountCode').value;
          const matchedPromo = promos.find(obj => obj.promo === inputCode);
          if(matchedPromo){
            const { product, thresholdAmount } = matchedPromo;
            const cartPrice = removeTwoZeros(cartData.total_price);
              const variantId = product;
              alreadyInCart = false;
              for (const item of cartData.items){
                if(item.variant_id == variantId ){
                  span.classList.remove('hidden');
                  span.innerHTML = ('item already in cart');
                  alreadyInCart = true;
                  break;
                }
              }
              if(!alreadyInCart){
                if(thresholdAmount <= cartPrice){    
                  span.classList.add('hidden');       
                 addToCart(variantId);
                }else{
                  span.classList.remove('hidden');
                  span.innerHTML = ('minimum order should be atleast ' + thresholdAmount);
                }
              }
            }else{
              span.classList.remove('hidden');
              span.innerHTML = ('Invalid Code');
            }
          }
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    function isIE() {
      const ua = window.navigator.userAgent;
      const msie = ua.indexOf('MSIE ');
      const trident = ua.indexOf('Trident/');

      return msie > 0 || trident > 0;
    }

    if (!isIE()) return;
    const cartSubmitInput = document.createElement('input');
    cartSubmitInput.setAttribute('name', 'checkout');
    cartSubmitInput.setAttribute('type', 'hidden');
    document.querySelector('#cart').appendChild(cartSubmitInput);
    document.querySelector('#checkout').addEventListener('click', function (event) {
      document.querySelector('#cart').submit();
    });

    
  });
  

  const applyBtn = document.querySelector('#apply-discount-button');
  applyBtn.addEventListener('click', checkThreshold);
</script>

{% schema %}
{
  "name": "t:sections.main-cart-footer.name",
  "class": "cart__footer-wrapper",
  "blocks": [
    {
      "type": "subtotal",
      "name": "t:sections.main-cart-footer.blocks.subtotal.name",
      "limit": 1
    },
    {
      "type": "buttons",
      "name": "t:sections.main-cart-footer.blocks.buttons.name",
      "limit": 1
    },
    {
      "type": "@app"
    }
  ]
  
}
{% endschema %}
